{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGift","category","a","url","encodeURI","console","log","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6KAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAWH,GAD7C,sDAErBI,QAAQC,IAAIH,GAFS,SAGFI,MAAMJ,GAHJ,cAGfK,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAACC,GAAS,IAAD,EAC9B,MAAO,CACLC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAVjB,kBAadQ,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IAGvC,OACE,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKN,IACpB,4BAAIA,QCuBKO,MA1Bf,YAA8B,IAAZrB,EAAW,EAAXA,SAAW,ECFD,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCuB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAsBxC,OAhBAC,qBAAW,WAET1B,EAASC,GAAW0B,MAAM,SAAAC,GACxBC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAEV,UAKJ,CAACtB,IAGGuB,EDlB0BM,CAAc7B,GAAlCe,EAFc,EAEnBN,KAAaa,EAFM,EAENA,QAErB,OACE,qCACE,6BAAKtB,IACHsB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAESA,GADCA,EAAIC,aEeXiB,EAzBM,WAAO,IAAD,EAEW5C,mBAAS,CAAC,cAFrB,mBAElB6C,EAFkB,KAEN9C,EAFM,KAIzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEI8C,EAAWpB,KAAK,SAAAX,GAAQ,OACtB,cAAC,EAAD,CACEA,SAAYA,GACLA,YCfrBgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d8d8ffc6.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('')\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 2){\r\n      setCategories( cats => [ inputValue, ...cats])\r\n      setInputValue('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <input \r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={ handleInputChange }\r\n      />\r\n    </form>\r\n  )\r\n}\r\nAddCategory.propTypes = {\r\n  setCategories:PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGift = async (category ) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=z65hRerTCbuDONsJ4m86b6dxnfHTFsbk`\r\n  console.log(url)\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map( (img) => {\r\n    return {\r\n      id:img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    }\r\n  })\r\n  return gifs\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n  \r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title}/>\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import PropTypes from 'prop-types'\r\n\r\nfunction GifGrid({category}) {\r\n\r\n  const { data:images, loading } = useFetchGifs( category );\r\n  \r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      { loading && <p>Loading</p>}\r\n      <div className='card-grid'>\r\n        {\r\n          images.map( img => ( \r\n            <GifGridItem \r\n                key={ img.id }\r\n                { ...img }\r\n            />\r\n        ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// GifGrid.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifGrid\r\n\r\n","import {useState, useEffect} from 'react'\r\nimport { getGift } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect( () => {\r\n\r\n    getGift( category ).then( imgs => {\r\n      setTimeout(() => {\r\n        setstate({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n      }, 3000)\r\n      \r\n    })\r\n\r\n    \r\n  }, [category])\r\n\r\n\r\n  return state; // {data:[], loading: true}\r\n}","import React, {useState} from 'react';\r\n\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid'\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One Punch'])\r\n\r\n  return (\r\n    <> \r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={ setCategories }/>\r\n      <hr />\r\n      <ol>\r\n        {\r\n          categories.map( category=> \r\n            <GifGrid \r\n              category = {category} \r\n              key = {category}\r\n            />\r\n          )\r\n        }\r\n      </ol>\r\n    </>\r\n    \r\n  )\r\n\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}